!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BDA_BASE_PORT_ADDRESS	defs.h	8;"	d
BDA_NUM_COLUMNS	defs.h	11;"	d
BDA_NUM_COLUMNS_LEN	defs.h	12;"	d
BDA_NUM_ROWS	defs.h	9;"	d
BDA_NUM_ROWS_LEN	defs.h	10;"	d
BUFSZ	mb_parce.c	24;"	d	file:
CC	Makefile	/^CC = i586-elf-gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -O3 -Wall -I. -I.\/include$/;"	m
CHECKSUM	boot.S	/^#define CHECKSUM	-(HEADER_MAGIC+HEADER_FLAGS)$/;"	d
CLR_BIT	defs.h	26;"	d
COLOR_BLACK	vga.c	11;"	d	file:
COLOR_BLACK	vga.h	8;"	d
COLOR_BLUE	vga.c	12;"	d	file:
COLOR_BLUE	vga.h	9;"	d
COLOR_BRIGHT	vga.c	9;"	d	file:
COLOR_BRIGHT	vga.h	6;"	d
COLOR_BROWN	vga.c	17;"	d	file:
COLOR_BROWN	vga.h	14;"	d
COLOR_CYAN	vga.c	14;"	d	file:
COLOR_CYAN	vga.h	11;"	d
COLOR_DARK_GREY	vga.c	19;"	d	file:
COLOR_DARK_GREY	vga.h	16;"	d
COLOR_GREEN	vga.c	13;"	d	file:
COLOR_GREEN	vga.h	10;"	d
COLOR_LIGHT_BLUE	vga.c	20;"	d	file:
COLOR_LIGHT_BLUE	vga.h	17;"	d
COLOR_LIGHT_CYAN	vga.c	21;"	d	file:
COLOR_LIGHT_CYAN	vga.h	18;"	d
COLOR_LIGHT_GREY	vga.c	18;"	d	file:
COLOR_LIGHT_GREY	vga.h	15;"	d
COLOR_LIGHT_MAGENTA	vga.c	23;"	d	file:
COLOR_LIGHT_MAGENTA	vga.h	20;"	d
COLOR_LIGHT_RED	vga.c	22;"	d	file:
COLOR_LIGHT_RED	vga.h	19;"	d
COLOR_MAGENTA	vga.c	16;"	d	file:
COLOR_MAGENTA	vga.h	13;"	d
COLOR_RED	vga.c	15;"	d	file:
COLOR_RED	vga.h	12;"	d
COLOR_WHITE	vga.c	25;"	d	file:
COLOR_WHITE	vga.h	22;"	d
COLOR_YELLOW	vga.c	24;"	d	file:
COLOR_YELLOW	vga.h	21;"	d
COM1_PORT_ADDRESS	defs.h	14;"	d
COM2_PORT_ADDRESS	defs.h	15;"	d
COM3_PORT_ADDRESS	defs.h	16;"	d
COM4_PORT_ADDRESS	defs.h	17;"	d
FALSE	kernel.h	13;"	d
FMT_JUSTIFY_LEFT	printf.c	10;"	d	file:
FMT_JUSTIFY_RIGHT	printf.c	9;"	d	file:
GDT_ACCESS_DC	segm.c	75;"	d	file:
GDT_ACCESS_EXEC	segm.c	74;"	d	file:
GDT_ACCESS_PRESENT	segm.c	73;"	d	file:
GDT_ACCESS_RW	segm.c	76;"	d	file:
GDT_CODE	cpu.h	18;"	d
GDT_CODE	segm.c	18;"	d	file:
GDT_DATA	cpu.h	19;"	d
GDT_DATA	segm.c	19;"	d	file:
GDT_DC_FLAG	cpu.h	10;"	d
GDT_DC_FLAG	segm.c	12;"	d	file:
GDT_EXEC_FLAG	cpu.h	9;"	d
GDT_EXEC_FLAG	segm.c	11;"	d	file:
GDT_FLAG_INPAGES	segm.c	78;"	d	file:
GDT_FLAG_MODE32	segm.c	79;"	d	file:
GDT_GRAN_PAGE	cpu.h	12;"	d
GDT_GRAN_PAGE	segm.c	14;"	d	file:
GDT_KERNEL	cpu.h	17;"	d
GDT_MODE32	cpu.h	13;"	d
GDT_MODE32	segm.c	15;"	d	file:
GDT_PRESENT	cpu.h	14;"	d
GDT_PRESENT	segm.c	16;"	d	file:
GDT_PRIVL0	cpu.h	5;"	d
GDT_PRIVL1	cpu.h	6;"	d
GDT_PRIVL2	cpu.h	7;"	d
GDT_PRIVL3	cpu.h	8;"	d
GDT_PRIVL_MASK	segm.c	71;"	d	file:
GDT_RW_FLAG	cpu.h	11;"	d
GDT_RW_FLAG	segm.c	13;"	d	file:
GDT_USER	cpu.h	16;"	d
GENISOIMAGE	Makefile	/^GENISOIMAGE = genisoimage$/;"	m
GET_BIT	defs.h	24;"	d
HEADER_FLAGS	boot.S	/^#define HEADER_FLAGS	(PAGE_ALGIN | MEMORY_INFO)$/;"	d
HEADER_MAGIC	boot.S	/^#define HEADER_MAGIC	0x1BADB002$/;"	d
KERNEL_CODE	defs.h	19;"	d
KERNEL_DATA	defs.h	20;"	d
KERNEL_LD	Makefile	/^KERNEL_LD = link-kernel.ld$/;"	m
KERNEL_STACK	boot.S	/^#define KERNEL_STACK	4096$/;"	d
LMOD_CHAR	printf.c	14;"	d	file:
LMOD_INT	printf.c	13;"	d	file:
LMOD_LONG	printf.c	16;"	d	file:
LMOD_LONG_LONG	printf.c	17;"	d	file:
LMOD_SHORT	printf.c	15;"	d	file:
LMOD_SIGNED	printf.c	12;"	d	file:
LMOD_SIZET	printf.c	18;"	d	file:
LMOD_VOIDPTR	printf.c	19;"	d	file:
MAX	kernel.h	22;"	d
MB_APM_FLAG	mb_parce.c	21;"	d	file:
MB_BD_FLAG	mb_parce.c	12;"	d	file:
MB_BOOT_FLAG	mb_parce.c	20;"	d	file:
MB_CMD_FLAG	mb_parce.c	13;"	d	file:
MB_CT_FLAG	mb_parce.c	19;"	d	file:
MB_DRIVES_FLAG	mb_parce.c	18;"	d	file:
MB_MEM_FLAG	mb_parce.c	11;"	d	file:
MB_MMAP_FLAG	mb_parce.c	17;"	d	file:
MB_MODS_FLAG	mb_parce.c	14;"	d	file:
MB_SYM_1_FLAG	mb_parce.c	15;"	d	file:
MB_SYM_2_FLAG	mb_parce.c	16;"	d	file:
MB_VBE_FLAG	mb_parce.c	22;"	d	file:
MEMORY_INFO	boot.S	/^#define MEMORY_INFO	1<<1$/;"	d
MIN	kernel.h	23;"	d
NELEMS	kernel.h	20;"	d
PAGE_ALGIN	boot.S	/^#define PAGE_ALGIN	1<<0$/;"	d
PGDIR_ACCESS	physpgalloc.c	13;"	d	file:
PGDIR_ALLOCATED	physpgalloc.c	15;"	d	file:
PGDIR_DIRTY	physpgalloc.c	14;"	d	file:
PGDIR_PRESENT	physpgalloc.c	10;"	d	file:
PGDIR_RW	physpgalloc.c	11;"	d	file:
PGDIR_USER	physpgalloc.c	12;"	d	file:
PRIVL_KERNEL	segm.c	4;"	d	file:
PRIVL_USER	segm.c	5;"	d	file:
PUTBUF	printf.c	35;"	d	file:
SEGM_EXEC	segm.c	9;"	d	file:
SEGM_READ	segm.c	7;"	d	file:
SEGM_WRITE	segm.c	8;"	d	file:
SET_BIT	defs.h	25;"	d
STAGE2	Makefile	/^STAGE2 = build\/stage2_eltorito$/;"	m
SWAP	defs.h	27;"	d
TRUE	kernel.h	17;"	d
USER_CODE	defs.h	21;"	d
USER_DATA	defs.h	22;"	d
VERSION_MAJOR	main.c	9;"	d	file:
VERSION_MINOR	main.c	10;"	d	file:
VGA_BUFFER_ADDR	defs.h	5;"	d
VGA_CURSOR_LSB	vga.c	6;"	d	file:
VGA_CURSOR_MSB	vga.c	5;"	d	file:
_COM_H_	com.h	2;"	d
_CPU_H_	cpu.h	2;"	d
_DEFS_H_	defs.h	2;"	d
_KERNEL_H_	kernel.h	2;"	d
_MBPARCE_H_	mb_parce.h	2;"	d
_PHYSPGALLOC_H_	physpgalloc.h	2;"	d
_SORT_H_	sort.h	2;"	d
_VGA_H_	vga.h	2;"	d
_start	boot.S	/^_start:$/;"	l
a	mb_parce.h	/^		} a;$/;"	m	union:mb_info::__anon1	typeref:struct:mb_info::__anon1::__anon2
access_byte	cpu.h	/^	uint8_t		access_byte : 8;$/;"	m	struct:gdt_entry
access_byte	segm.c	/^	uint8_t		access_byte : 8;$/;"	m	struct:gdt_entry	file:
addr	mb_parce.h	/^			uint32_t *addr;$/;"	m	struct:mb_info::__anon1::__anon2
addr	mb_parce.h	/^			uint32_t *addr;$/;"	m	struct:mb_info::__anon1::__anon3
area	mb_parce.h	/^struct area {$/;"	s
area_cmp	mb_parce.c	/^area_cmp(struct area **a, struct area **b)$/;"	f
area_parse	mb_parce.c	/^area_parse(struct mb_mmap *area, size_t mmap_length,$/;"	f
b	mb_parce.h	/^		} b;$/;"	m	union:mb_info::__anon1	typeref:struct:mb_info::__anon1::__anon3
base_addr	mb_parce.h	/^	uint64_t base_addr;$/;"	m	struct:mb_mmap
base_high	cpu.h	/^	uint32_t	base_high : 8;$/;"	m	struct:gdt_entry
base_high	segm.c	/^	uint32_t	base_high : 8;$/;"	m	struct:gdt_entry	file:
base_low	cpu.h	/^	uint32_t	base_low : 24;$/;"	m	struct:gdt_entry
base_low	segm.c	/^	uint32_t	base_low : 24;$/;"	m	struct:gdt_entry	file:
base_port	vga.c	/^static unsigned int base_port;$/;"	v	file:
beg	mb_parce.h	/^	uint64_t beg;$/;"	m	struct:area
bg_color	vga.c	/^static int bg_color = COLOR_BLACK, fg_color = COLOR_LIGHT_GREY;$/;"	v	file:
bios_get_param	vga.c	/^bios_get_param(unsigned long addr, unsigned int len)$/;"	f	file:
boot_device	mb_parce.h	/^	uint8_t *boot_device;$/;"	m	struct:mb_info
bootloader	mb_parce.h	/^	char *bootloader;$/;"	m	struct:mb_info
buffer	vga.c	/^static uint16_t *buffer = NULL;$/;"	v	file:
cli	boot.S	/^cli:$/;"	l
cmdline	mb_parce.h	/^	char *cmdline;$/;"	m	struct:mb_info
com_init	com.c	/^com_init(uint16_t port)$/;"	f
com_putc	com.c	/^com_putc(uint16_t port, int c)$/;"	f
com_puts	com.c	/^com_puts(uint16_t port, char *s)$/;"	f
com_trans_empty	com.c	/^com_trans_empty(uint16_t port)$/;"	f
config_table	mb_parce.h	/^	uint8_t *config_table;$/;"	m	struct:mb_info
cr3	segm.c	/^	uint32_t	cr3;$/;"	m	struct:tss_struct	file:
crlf	vga.c	/^static int crlf = 0;$/;"	v	file:
cs	segm.c	/^	uint16_t	cs, res5;$/;"	m	struct:tss_struct	file:
diridx	physpgalloc.c	/^int diridx;$/;"	v
do_printf	printf.c	/^do_printf(const char *fmt, va_list ap, char *buf, size_t len)$/;"	f	file:
drives_addr	mb_parce.h	/^	uint32_t *drives_addr;$/;"	m	struct:mb_info
drives_length	mb_parce.h	/^	uint32_t drives_length;$/;"	m	struct:mb_info
ds	segm.c	/^	uint16_t	ds, res7;$/;"	m	struct:tss_struct	file:
eax	segm.c	/^	uint32_t	eax;$/;"	m	struct:tss_struct	file:
ebp	segm.c	/^        uint32_t	ebp;$/;"	m	struct:tss_struct	file:
ebx	segm.c	/^        uint32_t	ebx;$/;"	m	struct:tss_struct	file:
ecx	segm.c	/^	uint32_t	ecx;$/;"	m	struct:tss_struct	file:
edi	segm.c	/^        uint32_t	edi;$/;"	m	struct:tss_struct	file:
edx	segm.c	/^	uint32_t	edx;$/;"	m	struct:tss_struct	file:
eflags	segm.c	/^	uint32_t	eflags;$/;"	m	struct:tss_struct	file:
eip	segm.c	/^	uint32_t	eip;$/;"	m	struct:tss_struct	file:
en_pg	boot.S	/^en_pg:$/;"	l
end	mb_parce.h	/^	uint64_t end;$/;"	m	struct:area
es	segm.c	/^	uint16_t	es, res4;$/;"	m	struct:tss_struct	file:
esi	segm.c	/^	uint32_t	esi;$/;"	m	struct:tss_struct	file:
esp	segm.c	/^	uint32_t	esp;$/;"	m	struct:tss_struct	file:
esp0	segm.c	/^	uint32_t	esp0;$/;"	m	struct:tss_struct	file:
esp1	segm.c	/^	uint32_t	esp1;$/;"	m	struct:tss_struct	file:
esp2	segm.c	/^	uint32_t	esp2;$/;"	m	struct:tss_struct	file:
fg_color	vga.c	/^static int bg_color = COLOR_BLACK, fg_color = COLOR_LIGHT_GREY;$/;"	v	file:
flags	cpu.h	/^	uint8_t		flags : 4;$/;"	m	struct:gdt_entry
flags	mb_parce.h	/^	uint32_t flags;$/;"	m	struct:mb_info
flags	segm.c	/^	uint8_t		flags : 4;$/;"	m	struct:gdt_entry	file:
fs	segm.c	/^	uint16_t	fs, res8;$/;"	m	struct:tss_struct	file:
gdt_entry	cpu.h	/^struct gdt_entry {$/;"	s
gdt_entry	segm.c	/^struct gdt_entry {$/;"	s	file:
gdt_entry_set	segm.c	/^gdt_entry_set(unsigned index,$/;"	f	file:
gdt_ptr	segm.c	/^static struct gdtr gdt_ptr;$/;"	v	typeref:struct:gdtr	file:
gdt_table	segm.c	/^static struct gdt_entry gdt_table[6];$/;"	v	typeref:struct:gdt_entry	file:
gdtr	cpu.h	/^struct gdtr {$/;"	s
gdtr	segm.c	/^struct gdtr {$/;"	s	file:
gs	segm.c	/^	uint16_t	gs, res9;$/;"	m	struct:tss_struct	file:
headers	Makefile	/^headers = kernel.h vga.h physpgalloc.h sort.h mb_parce.h com.h$/;"	m
height	vga.c	/^static unsigned int width, height;$/;"	v	file:
inb	ioport.c	/^inb(uint16_t port)$/;"	f
interrupt_stack	segm.c	/^static unsigned char interrupt_stack[4096];$/;"	v	file:
inw	ioport.c	/^inw(uint16_t port)$/;"	f
iombase	segm.c	/^	uint16_t	res11, iombase;$/;"	m	struct:tss_struct	file:
iprintf	printf.c	/^iprintf(const char *fmt, ...)$/;"	f
is_ascii_digit	printf.c	21;"	d	file:
isnprintf	printf.c	/^isnprintf(char *buf, size_t size, const char *fmt, ...)$/;"	f
kernel_stack	boot.S	/^kernel_stack:$/;"	l
ldt	segm.c	/^	uint16_t	ldt, res10;$/;"	m	struct:tss_struct	file:
length	mb_parce.h	/^	uint64_t length;$/;"	m	struct:mb_mmap
limit_high	cpu.h	/^	uint32_t	limit_high : 4;$/;"	m	struct:gdt_entry
limit_high	segm.c	/^	uint32_t	limit_high : 4;$/;"	m	struct:gdt_entry	file:
limit_low	cpu.h	/^	uint32_t	limit_low : 16;$/;"	m	struct:gdt_entry
limit_low	segm.c	/^	uint32_t	limit_low : 16;$/;"	m	struct:gdt_entry	file:
load_gdt	boot.S	/^load_gdt:$/;"	l
main	main.c	/^main(size_t eax, void *multiboot)$/;"	f
mb_info	mb_parce.h	/^struct mb_info {$/;"	s
mb_mmap	mb_parce.h	/^struct mb_mmap {$/;"	s
mb_parse	mb_parce.c	/^mb_parse(struct mb_info *info)$/;"	f
mem_lower	mb_parce.h	/^	uint32_t mem_lower;$/;"	m	struct:mb_info
mem_upper	mb_parce.h	/^	uint32_t mem_upper;$/;"	m	struct:mb_info
memcpy	libk.c	/^memcpy(void *dst, const void *src, size_t len)$/;"	f
memset	libk.c	/^memset(void *s, int c, size_t n)$/;"	f
mmap_addr	mb_parce.h	/^	void *mmap_addr;$/;"	m	struct:mb_info
mmap_length	mb_parce.h	/^	uint32_t mmap_length;$/;"	m	struct:mb_info
mods_addr	mb_parce.h	/^	uint32_t *mods_addr;$/;"	m	struct:mb_info
mods_count	mb_parce.h	/^	uint32_t mods_count;$/;"	m	struct:mb_info
num	mb_parce.h	/^			uint32_t num;$/;"	m	struct:mb_info::__anon1::__anon3
objects	Makefile	/^objects = $(sources:.c=.o)$/;"	m
offset	cpu.h	/^	uint32_t	offset;$/;"	m	struct:gdtr
offset	segm.c	/^	uint32_t	offset;$/;"	m	struct:gdtr	file:
outb	ioport.c	/^outb(uint16_t port, uint8_t val)$/;"	f
outw	ioport.c	/^outw(uint16_t port, uint16_t val)$/;"	f
pagedir	physpgalloc.c	/^size_t pagedir[1024] __attribute__ ((aligned(4096)));$/;"	v
pagemap	physpgalloc.c	/^pagemap(physaddr_t phys, vaddr_t virt, size_t flags)$/;"	f
pagetables	physpgalloc.c	/^size_t pagetables[1024][1024] __attribute__ ((aligned(4096)));$/;"	v
physaddr_t	physpgalloc.h	/^typedef size_t physaddr_t;$/;"	t
physpgalloc	physpgalloc.c	/^physpgalloc()$/;"	f
physpgfree	physpgalloc.c	/^physpgfree(physaddr_t page)$/;"	f
physpginit	physpgalloc.c	/^physpginit(struct area **buf, int buflen)$/;"	f
prev	segm.c	/^	uint16_t	prev, res0;$/;"	m	struct:tss_struct	file:
print64	mb_parce.c	26;"	d	file:
res0	segm.c	/^	uint16_t	prev, res0;$/;"	m	struct:tss_struct	file:
res1	segm.c	/^	uint16_t	ss0, res1;$/;"	m	struct:tss_struct	file:
res10	segm.c	/^	uint16_t	ldt, res10;$/;"	m	struct:tss_struct	file:
res11	segm.c	/^	uint16_t	res11, iombase;$/;"	m	struct:tss_struct	file:
res2	segm.c	/^	uint16_t	ss1, res2;$/;"	m	struct:tss_struct	file:
res3	segm.c	/^	uint16_t	ss2, res3;$/;"	m	struct:tss_struct	file:
res4	segm.c	/^	uint16_t	es, res4;$/;"	m	struct:tss_struct	file:
res5	segm.c	/^	uint16_t	cs, res5;$/;"	m	struct:tss_struct	file:
res6	segm.c	/^	uint16_t	ss, res6;$/;"	m	struct:tss_struct	file:
res7	segm.c	/^	uint16_t	ds, res7;$/;"	m	struct:tss_struct	file:
res8	segm.c	/^	uint16_t	fs, res8;$/;"	m	struct:tss_struct	file:
res9	segm.c	/^	uint16_t	gs, res9;$/;"	m	struct:tss_struct	file:
segm_init	segm.c	/^segm_init()$/;"	f
shndx	mb_parce.h	/^			uint32_t shndx;$/;"	m	struct:mb_info::__anon1::__anon3
size	cpu.h	/^	uint16_t	size;$/;"	m	struct:gdtr
size	mb_parce.h	/^			uint32_t size;$/;"	m	struct:mb_info::__anon1::__anon3
size	mb_parce.h	/^	uint32_t size;$/;"	m	struct:mb_mmap
size	segm.c	/^	uint16_t	size;$/;"	m	struct:gdtr	file:
size_t	defs.h	/^	typedef uint32_t size_t;$/;"	t
sort	sort.c	/^sort(void *base, size_t nmeb, size_t size, int (*cmp)(const void *, const void *))$/;"	f
sources	Makefile	/^sources = main.c vga.c libk.c ioport.c printf.c segm.c physpgalloc.c sort.c mb_parce.c \\$/;"	m
ss	segm.c	/^	uint16_t	ss, res6;$/;"	m	struct:tss_struct	file:
ss0	segm.c	/^	uint16_t	ss0, res1;$/;"	m	struct:tss_struct	file:
ss1	segm.c	/^	uint16_t	ss1, res2;$/;"	m	struct:tss_struct	file:
ss2	segm.c	/^	uint16_t	ss2, res3;$/;"	m	struct:tss_struct	file:
sti	boot.S	/^sti:$/;"	l
strlen	libk.c	/^strlen(const char *s)$/;"	f
strsize	mb_parce.h	/^			uint32_t strsize;$/;"	m	struct:mb_info::__anon1::__anon2
swap	sort.c	/^swap(void *a, void *b, size_t size)$/;"	f
symbols	mb_parce.h	/^	} symbols;$/;"	m	struct:mb_info	typeref:union:mb_info::__anon1
tabs	vga.c	/^static uint32_t tabs[8];$/;"	v	file:
tabsize	mb_parce.h	/^			uint32_t tabsize;$/;"	m	struct:mb_info::__anon1::__anon2
tss	segm.c	/^static struct tss_struct tss;$/;"	v	typeref:struct:tss_struct	file:
tss_struct	cpu.h	/^struct tss_struct {$/;"	s
tss_struct	segm.c	/^struct tss_struct {$/;"	s	file:
type	mb_parce.h	/^	uint32_t type;$/;"	m	struct:mb_mmap
vaddr_t	physpgalloc.h	/^typedef size_t vaddr_t;$/;"	t
vga_clear_screen	vga.c	/^vga_clear_screen()$/;"	f
vga_get_params	vga.c	/^vga_get_params(unsigned int *width, unsigned int *height, unsigned int *base_port)$/;"	f	file:
vga_init	vga.c	/^vga_init()$/;"	f
vga_make_char	vga.c	/^vga_make_char(int c, int fg_color, int bg_color)$/;"	f	file:
vga_move_hardware_cursor	vga.c	/^vga_move_hardware_cursor(int x, int y)$/;"	f
vga_putc	vga.c	/^vga_putc(int c)$/;"	f
vga_puts	vga.c	/^vga_puts(const char *s)$/;"	f
vga_scroll_up	vga.c	/^vga_scroll_up()$/;"	f	file:
vga_set_bgcolor	vga.c	/^vga_set_bgcolor(int color)$/;"	f
vga_set_fgcolor	vga.c	/^vga_set_fgcolor(int color)$/;"	f
width	vga.c	/^static unsigned int width, height;$/;"	v	file:
x_coord	vga.c	/^static int x_coord = 0, y_coord = 0;$/;"	v	file:
y_coord	vga.c	/^static int x_coord = 0, y_coord = 0;$/;"	v	file:
